import { Injectable, NgZone } from '@angular/core';
import { interval, ReplaySubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { GoogleAuth2LoaderService } from './google-auth2-loader.service';
import { GoogleApiLoaderService } from './google-api-loader.service';
import * as i0 from "@angular/core";
import * as i1 from "./google-auth2-loader.service";
import * as i2 from "./google-api-loader.service";
export class GoogleAuthService {
    constructor(googleAuth2LoaderService, googleApiLoaderService, ngZone) {
        this.googleAuth2LoaderService = googleAuth2LoaderService;
        this.googleApiLoaderService = googleApiLoaderService;
        this.ngZone = ngZone;
        this._authState = new ReplaySubject(1);
        this._loginState = new ReplaySubject(1);
        this.SIGN_IN_EXPIRE_KEY = 'loginExpirationDate';
        if (this.googleApiLoaderService.isMocked()) {
            this.signIn();
        }
        else {
            this.googleApiLoaderService.onLoad().subscribe(() => {
                this.googleAuth2LoaderService.getAuth().subscribe(auth => this.authLoaded(auth), () => this.removeState());
                interval(20 * 60 * 1000).pipe(// run every 20min
                tap(() => this.refreshToken())).subscribe();
            });
        }
    }
    get authState() {
        return this._authState.asObservable();
    }
    get loginState() {
        return this._loginState.asObservable();
    }
    signIn() {
        if (this.googleApiLoaderService.isMocked()) {
            this._loginState.next(JSON.parse(localStorage.getItem('user')));
            this._authState.next(JSON.parse(localStorage.getItem('user')));
        }
        else {
            const now = new Date();
            const expirationDate = this.setTime(now, null, now.getMinutes() + 5);
            localStorage.setItem(this.SIGN_IN_EXPIRE_KEY, expirationDate.toISOString());
            const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
            this.auth.signIn({
                prompt: 'select_account',
                ux_mode: isSafari ? 'popup' : 'redirect',
            }).then(() => this.fetchLoginData());
        }
    }
    signOut() {
        if (!this.googleApiLoaderService.isMocked()) {
            this.auth.signOut();
        }
        this.removeState();
    }
    fetchLoginData() {
        return this.auth.currentUser.get().reloadAuthResponse().then(r => {
            this.ngZone.run(() => {
                this._loginState.next(this.getProfile(r.id_token, r.expires_at));
                this._authState.next(this.getProfile(r.id_token, r.expires_at));
            });
        });
    }
    refreshToken() {
        return this.auth.currentUser.get().reloadAuthResponse().then(r => {
            this.ngZone.run(() => this._authState.next(this.getProfile(r.id_token, r.expires_at)));
        });
    }
    authLoaded(auth) {
        this.auth = auth;
        if (this.auth.currentUser.get().isSignedIn()) {
            this.fetchLoginData();
            localStorage.removeItem(this.SIGN_IN_EXPIRE_KEY);
        }
        else {
            const signInDateExpireDate = new Date(localStorage.getItem(this.SIGN_IN_EXPIRE_KEY));
            if (signInDateExpireDate > new Date()) {
                this._loginState.next({ type: 'cookiesNotEnabled' });
                this._authState.next(null);
            }
            else {
                this.removeState();
            }
        }
    }
    removeState() {
        this._authState.next(null);
        this._loginState.next(null);
    }
    getProfile(token, expiresAt) {
        const p = this.auth.currentUser.get().getBasicProfile();
        return p ? {
            id: p.getId(),
            email: p.getEmail(),
            firstName: p.getGivenName(),
            lastName: p.getFamilyName(),
            avatar: p.getImageUrl(),
            idToken: token,
            tokenExpiresAt: expiresAt,
        } : null;
    }
    setTime(date, hours, minutes, seconds, milliseconds) {
        const newDate = new Date(date);
        if (typeof hours === 'number') {
            newDate.setHours(hours);
        }
        if (typeof minutes === 'number') {
            newDate.setMinutes(minutes);
        }
        if (typeof seconds === 'number') {
            newDate.setSeconds(seconds);
        }
        if (typeof milliseconds === 'number') {
            newDate.setMilliseconds(milliseconds);
        }
        return newDate;
    }
}
/** @nocollapse */ GoogleAuthService.ɵfac = function GoogleAuthService_Factory(t) { return new (t || GoogleAuthService)(i0.ɵɵinject(i1.GoogleAuth2LoaderService), i0.ɵɵinject(i2.GoogleApiLoaderService), i0.ɵɵinject(i0.NgZone)); };
/** @nocollapse */ GoogleAuthService.ɵprov = i0.ɵɵdefineInjectable({ token: GoogleAuthService, factory: GoogleAuthService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(GoogleAuthService, [{
        type: Injectable
    }], function () { return [{ type: i1.GoogleAuth2LoaderService }, { type: i2.GoogleApiLoaderService }, { type: i0.NgZone }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,