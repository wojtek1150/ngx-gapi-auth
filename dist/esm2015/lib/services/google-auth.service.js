/// <reference types="gapi.auth2" />
import { Injectable, NgZone } from '@angular/core';
import { interval, ReplaySubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { GoogleAuth2LoaderService } from './google-auth2-loader.service';
import { GoogleApiLoaderService } from './google-api-loader.service';
export class GoogleAuthService {
    constructor(googleAuth2LoaderService, googleApiLoaderService, ngZone) {
        this.googleAuth2LoaderService = googleAuth2LoaderService;
        this.googleApiLoaderService = googleApiLoaderService;
        this.ngZone = ngZone;
        this._authState = new ReplaySubject(1);
        this._loginState = new ReplaySubject(1);
        this.SIGN_IN_EXPIRE_KEY = 'loginExpirationDate';
        if (this.googleApiLoaderService.isMocked()) {
            this.signIn();
        }
        else {
            this.googleApiLoaderService.onLoad().subscribe(() => {
                this.googleAuth2LoaderService.getAuth().subscribe(auth => this.authLoaded(auth), () => this.removeState());
                interval(20 * 60 * 1000).pipe(// run every 20min
                tap(() => this.refreshToken())).subscribe();
            });
        }
    }
    get authState() {
        return this._authState.asObservable();
    }
    get loginState() {
        return this._loginState.asObservable();
    }
    signIn() {
        if (this.googleApiLoaderService.isMocked()) {
            this._loginState.next(JSON.parse(localStorage.getItem('user')));
            this._authState.next(JSON.parse(localStorage.getItem('user')));
        }
        else {
            const now = new Date();
            const expirationDate = this.setTime(now, null, now.getMinutes() + 5);
            localStorage.setItem(this.SIGN_IN_EXPIRE_KEY, expirationDate.toISOString());
            const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
            this.auth.signIn({
                prompt: 'select_account',
                ux_mode: isSafari ? 'popup' : 'redirect',
            }).then(() => this.fetchLoginData());
        }
    }
    signOut() {
        if (!this.googleApiLoaderService.isMocked()) {
            this.auth.signOut();
        }
        this.removeState();
    }
    fetchLoginData() {
        return this.auth.currentUser.get().reloadAuthResponse().then(r => {
            this.ngZone.run(() => {
                this._loginState.next(this.getProfile(r.id_token, r.expires_at));
                this._authState.next(this.getProfile(r.id_token, r.expires_at));
            });
        });
    }
    refreshToken() {
        return this.auth.currentUser.get().reloadAuthResponse().then(r => {
            this.ngZone.run(() => this._authState.next(this.getProfile(r.id_token, r.expires_at)));
        });
    }
    authLoaded(auth) {
        this.auth = auth;
        if (this.auth.currentUser.get().isSignedIn()) {
            this.fetchLoginData();
            localStorage.removeItem(this.SIGN_IN_EXPIRE_KEY);
        }
        else {
            const signInDateExpireDate = new Date(localStorage.getItem(this.SIGN_IN_EXPIRE_KEY));
            if (signInDateExpireDate > new Date()) {
                this._loginState.next({ type: 'cookiesNotEnabled' });
                this._authState.next(null);
            }
            else {
                this.removeState();
            }
        }
    }
    removeState() {
        this._authState.next(null);
        this._loginState.next(null);
    }
    getProfile(token, expiresAt) {
        const p = this.auth.currentUser.get().getBasicProfile();
        return p ? {
            id: p.getId(),
            email: p.getEmail(),
            firstName: p.getGivenName(),
            lastName: p.getFamilyName(),
            avatar: p.getImageUrl(),
            idToken: token,
            tokenExpiresAt: expiresAt,
        } : null;
    }
    setTime(date, hours, minutes, seconds, milliseconds) {
        const newDate = new Date(date);
        if (typeof hours === 'number') {
            newDate.setHours(hours);
        }
        if (typeof minutes === 'number') {
            newDate.setMinutes(minutes);
        }
        if (typeof seconds === 'number') {
            newDate.setSeconds(seconds);
        }
        if (typeof milliseconds === 'number') {
            newDate.setMilliseconds(milliseconds);
        }
        return newDate;
    }
}
GoogleAuthService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GoogleAuthService.ctorParameters = () => [
    { type: GoogleAuth2LoaderService },
    { type: GoogleApiLoaderService },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWF1dGguc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvc2VydmljZXMvZ29vZ2xlLWF1dGguc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQ0FBb0M7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSXJFLE1BQU0sT0FBTyxpQkFBaUI7SUFlNUIsWUFDVSx3QkFBa0QsRUFDbEQsc0JBQThDLEVBQzlDLE1BQWM7UUFGZCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQ2xELDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQWpCaEIsZUFBVSxHQUE0QixJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRCxnQkFBVyxHQUEwQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUdqRSx1QkFBa0IsR0FBRyxxQkFBcUIsQ0FBQztRQWUxRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUMxQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjthQUFNO1lBQ0wsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2xELElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQy9DLElBQUksQ0FBQyxFQUFFLENB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QUFVOzs7O1lBSkYsd0JBQXdCO1lBQ3hCLHNCQUFzQjtZQUxWLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImdhcGkuYXV0aDJcIiAvPlxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbnRlcnZhbCwgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBHb29nbGVBdXRoMkxvYWRlclNlcnZpY2UgfSBmcm9tICcuL2dvb2dsZS1hdXRoMi1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBHb29nbGVBcGlMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9nb29nbGUtYXBpLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGhEYXRhLCBTaWduSW5FcnJvciB9IGZyb20gJy4uL21vZGVscy9hdXRoJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdvb2dsZUF1dGhTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfYXV0aFN0YXRlOiBSZXBsYXlTdWJqZWN0PEF1dGhEYXRhPiA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuICBwcml2YXRlIF9sb2dpblN0YXRlOiBSZXBsYXlTdWJqZWN0PEF1dGhEYXRhIHwgU2lnbkluRXJyb3I+ID0gbmV3IFJlcGxheVN1YmplY3QoMSk7XG4gIHByaXZhdGUgYXV0aDogZ2FwaS5hdXRoMi5Hb29nbGVBdXRoO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgU0lHTl9JTl9FWFBJUkVfS0VZID0gJ2xvZ2luRXhwaXJhdGlvbkRhdGUnO1xuXG4gIGdldCBhdXRoU3RhdGUoKTogT2JzZXJ2YWJsZTxBdXRoRGF0YT4ge1xuICAgIHJldHVybiB0aGlzLl9hdXRoU3RhdGUuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBnZXQgbG9naW5TdGF0ZSgpOiBPYnNlcnZhYmxlPEF1dGhEYXRhIHwgU2lnbkluRXJyb3I+IHtcbiAgICByZXR1cm4gdGhpcy5fbG9naW5TdGF0ZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZ29vZ2xlQXV0aDJMb2FkZXJTZXJ2aWNlOiBHb29nbGVBdXRoMkxvYWRlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBnb29nbGVBcGlMb2FkZXJTZXJ2aWNlOiBHb29nbGVBcGlMb2FkZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmVcbiAgKSB7XG4gICAgaWYgKHRoaXMuZ29vZ2xlQXBpTG9hZGVyU2VydmljZS5pc01vY2tlZCgpKSB7XG4gICAgICB0aGlzLnNpZ25JbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdvb2dsZUFwaUxvYWRlclNlcnZpY2Uub25Mb2FkKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5nb29nbGVBdXRoMkxvYWRlclNlcnZpY2UuZ2V0QXV0aCgpLnN1YnNjcmliZShcbiAgICAgICAgICBhdXRoID0+IHRoaXMuYXV0aExvYWRlZChhdXRoKSxcbiAgICAgICAgICAoKSA9PiB0aGlzLnJlbW92ZVN0YXRlKClcbiAgICAgICAgKTtcbiAgICAgICAgaW50ZXJ2YWwoMjAgKiA2MCAqIDEwMDApLnBpcGUoICAvLyBydW4gZXZlcnkgMjBtaW5cbiAgICAgICAgICB0YXAoKCkgPT4gdGhpcy5yZWZyZXNoVG9rZW4oKSlcbiAgICAgICAgKS5zdWJzY3JpYmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzaWduSW4oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZ29vZ2xlQXBpTG9hZGVyU2VydmljZS5pc01vY2tlZCgpKSB7XG4gICAgICB0aGlzLl9sb2dpblN0YXRlLm5leHQoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpKSk7XG4gICAgICB0aGlzLl9hdXRoU3RhdGUubmV4dChKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJykpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gdGhpcy5zZXRUaW1lKG5vdywgbnVsbCwgbm93LmdldE1pbnV0ZXMoKSArIDUpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5TSUdOX0lOX0VYUElSRV9LRVksIGV4cGlyYXRpb25EYXRlLnRvSVNPU3RyaW5nKCkpO1xuICAgICAgY29uc3QgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdGhpcy5hdXRoLnNpZ25Jbih7XG4gICAgICAgIHByb21wdDogJ3NlbGVjdF9hY2NvdW50JyxcbiAgICAgICAgdXhfbW9kZTogaXNTYWZhcmkgPyAncG9wdXAnIDogJ3JlZGlyZWN0JyxcbiAgICAgIH0pLnRoZW4oKCkgPT4gdGhpcy5mZXRjaExvZ2luRGF0YSgpKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2lnbk91dCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZ29vZ2xlQXBpTG9hZGVyU2VydmljZS5pc01vY2tlZCgpKSB7XG4gICAgICB0aGlzLmF1dGguc2lnbk91dCgpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZVN0YXRlKCk7XG4gIH1cblxuICBwdWJsaWMgZmV0Y2hMb2dpbkRhdGEoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aC5jdXJyZW50VXNlci5nZXQoKS5yZWxvYWRBdXRoUmVzcG9uc2UoKS50aGVuKHIgPT4ge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5fbG9naW5TdGF0ZS5uZXh0KHRoaXMuZ2V0UHJvZmlsZShyLmlkX3Rva2VuLCByLmV4cGlyZXNfYXQpKTtcbiAgICAgICAgdGhpcy5fYXV0aFN0YXRlLm5leHQodGhpcy5nZXRQcm9maWxlKHIuaWRfdG9rZW4sIHIuZXhwaXJlc19hdCkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVmcmVzaFRva2VuKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmF1dGguY3VycmVudFVzZXIuZ2V0KCkucmVsb2FkQXV0aFJlc3BvbnNlKCkudGhlbihyID0+IHtcbiAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLl9hdXRoU3RhdGUubmV4dCh0aGlzLmdldFByb2ZpbGUoci5pZF90b2tlbiwgci5leHBpcmVzX2F0KSkpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhdXRoTG9hZGVkKGF1dGg6IGdhcGkuYXV0aDIuR29vZ2xlQXV0aCk6IHZvaWQge1xuICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgaWYgKHRoaXMuYXV0aC5jdXJyZW50VXNlci5nZXQoKS5pc1NpZ25lZEluKCkpIHtcbiAgICAgIHRoaXMuZmV0Y2hMb2dpbkRhdGEoKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuU0lHTl9JTl9FWFBJUkVfS0VZKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2lnbkluRGF0ZUV4cGlyZURhdGUgPSBuZXcgRGF0ZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLlNJR05fSU5fRVhQSVJFX0tFWSkpO1xuICAgICAgaWYgKHNpZ25JbkRhdGVFeHBpcmVEYXRlID4gbmV3IERhdGUoKSkge1xuICAgICAgICB0aGlzLl9sb2dpblN0YXRlLm5leHQoeyB0eXBlOiAnY29va2llc05vdEVuYWJsZWQnIH0pO1xuICAgICAgICB0aGlzLl9hdXRoU3RhdGUubmV4dChudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVN0YXRlKCk6IHZvaWQge1xuICAgIHRoaXMuX2F1dGhTdGF0ZS5uZXh0KG51bGwpO1xuICAgIHRoaXMuX2xvZ2luU3RhdGUubmV4dChudWxsKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJvZmlsZSh0b2tlbjogc3RyaW5nLCBleHBpcmVzQXQ6IG51bWJlcik6IEF1dGhEYXRhIHtcbiAgICBjb25zdCBwID0gdGhpcy5hdXRoLmN1cnJlbnRVc2VyLmdldCgpLmdldEJhc2ljUHJvZmlsZSgpO1xuICAgIHJldHVybiBwID8ge1xuICAgICAgaWQ6IHAuZ2V0SWQoKSxcbiAgICAgIGVtYWlsOiBwLmdldEVtYWlsKCksXG4gICAgICBmaXJzdE5hbWU6IHAuZ2V0R2l2ZW5OYW1lKCksXG4gICAgICBsYXN0TmFtZTogcC5nZXRGYW1pbHlOYW1lKCksXG4gICAgICBhdmF0YXI6IHAuZ2V0SW1hZ2VVcmwoKSxcbiAgICAgIGlkVG9rZW46IHRva2VuLFxuICAgICAgdG9rZW5FeHBpcmVzQXQ6IGV4cGlyZXNBdCxcbiAgICB9IDogbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0VGltZShkYXRlOiBzdHJpbmcgfCBEYXRlLCBob3Vycz86IG51bWJlciwgbWludXRlcz86IG51bWJlciwgc2Vjb25kcz86IG51bWJlciwgbWlsbGlzZWNvbmRzPzogbnVtYmVyKTogRGF0ZSB7XG4gICAgY29uc3QgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIGlmICh0eXBlb2YgaG91cnMgPT09ICdudW1iZXInKSB7XG4gICAgICBuZXdEYXRlLnNldEhvdXJzKGhvdXJzKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtaW51dGVzID09PSAnbnVtYmVyJykge1xuICAgICAgbmV3RGF0ZS5zZXRNaW51dGVzKG1pbnV0ZXMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNlY29uZHMgPT09ICdudW1iZXInKSB7XG4gICAgICBuZXdEYXRlLnNldFNlY29uZHMoc2Vjb25kcyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWlsbGlzZWNvbmRzID09PSAnbnVtYmVyJykge1xuICAgICAgbmV3RGF0ZS5zZXRNaWxsaXNlY29uZHMobWlsbGlzZWNvbmRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGU7XG4gIH1cbn1cbiJdfQ==