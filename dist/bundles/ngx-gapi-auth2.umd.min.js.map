{"version":3,"sources":["../../src/lib/config/google-api.config.ts","../../src/lib/models/auth.ts","../../src/lib/services/google-api-loader.service.ts","../../src/lib/services/google-auth2-loader.service.ts","../../src/lib/services/google-auth.service.ts","../../src/lib/common-util-google-oauth.module.ts"],"names":["GoogleApiConfig","config","this","clientConfig","mocked","e2e","prototype","getMocked","getClientConfig","id","firstName","lastName","email","avatar","idToken","tokenExpiresAt","NG_GAPI_CONFIG","InjectionToken","GoogleApiLoaderService","gapiUrl","loadGapi","subscribe","onLoad","getConfig","isMocked","_this","Observable","observer","node","document","createElement","src","type","getElementsByTagName","appendChild","onload","next","complete","i0__namespace","ɵɵinject","factory","ɵfac","Injectable","Inject","GoogleAuth2LoaderService","googleApi","GoogleAuth","undefined","loadGoogleAuth2","getAuth","newInstance","pipe","mergeMap","of","gapi","load","auth2","init","then","auth","catch","err","error","GoogleAuthService","googleAuth2LoaderService","googleApiLoaderService","ngZone","_authState","ReplaySubject","_loginState","SIGN_IN_EXPIRE_KEY","signIn","authLoaded","removeState","interval","tap","refreshToken","Object","defineProperty","asObservable","JSON","parse","localStorage","getItem","now","Date","expirationDate","setTime","getMinutes","setItem","toISOString","isSafari","test","navigator","userAgent","prompt","ux_mode","fetchLoginData","signOut","currentUser","get","reloadAuthResponse","r","run","getProfile","id_token","expires_at","isSignedIn","removeItem","token","expiresAt","p","getBasicProfile","getId","getEmail","getGivenName","getFamilyName","getImageUrl","date","hours","minutes","seconds","milliseconds","newDate","setHours","setMinutes","setSeconds","setMilliseconds","NgZone","GoogleOauthModule","forRoot","gapiConfigProvider","ngModule","providers","CommonModule","imports","NgModule"],"mappings":"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","sourcesContent":["export interface NgGapiClientConfig {\n\n  /**\n   * User for mocking auth flow to local storage save\n   */\n  e2e: boolean;\n\n  /**\n   * The app's client ID, found and created in the Google Developers Console.\n   */\n  client_id: string;\n\n  /**\n   * The domains for which to create sign-in cookies. Either a URI, single_host_origin, or none.\n   * Defaults to single_host_origin if unspecified.\n   */\n  cookie_policy?: string;\n\n  /**\n   * The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false.\n   */\n  scope?: string;\n\n  /**\n   * Fetch users' basic profile information when they sign in. Adds 'profile' and 'email' to the requested scopes. True if unspecified.\n   */\n  fetch_basic_profile?: boolean;\n\n  /**\n   * The Google Apps domain to which users must belong to sign in. This is susceptible to modification by clients,\n   * so be sure to verify the hosted domain property of the returned user. Use GoogleUser.getHostedDomain() on the client,\n   * and the hd claim in the ID Token on the server to verify the domain is what you expected.\n   */\n  hosted_domain?: string;\n\n  /**\n   * The UX mode to use for the sign-in flow.\n   * By default, it will open the consent flow in a popup.\n   */\n  ux_mode?: 'popup' | 'redirect';\n\n  /**\n   * If using ux_mode='redirect', this parameter allows you to override the default redirect_uri that will be used at the end of the consent flow.\n   * The default redirect_uri is the current URL stripped of query parameters and hash fragment.\n   */\n  redirect_uri?: string;\n}\n\nexport class GoogleApiConfig {\n  protected clientConfig: NgGapiClientConfig;\n  protected mocked: boolean;\n\n  constructor(config: NgGapiClientConfig) {\n    this.clientConfig = config;\n    this.mocked = config.e2e;\n  }\n\n  public getMocked(): boolean {\n    return this.mocked;\n  }\n\n  public getClientConfig(): NgGapiClientConfig {\n    return this.clientConfig;\n  }\n}\n","export class AuthData {\n  constructor(\n    public id: string,\n    public firstName: string,\n    public lastName: string,\n    public email: string,\n    public avatar: string,\n    public idToken: string,\n    public tokenExpiresAt: number\n  ) { }\n}\n\nexport interface SignInError {\n  type: 'cookiesNotEnabled' | string;\n}\n\nexport interface TokenError {\n  idpId: 'google' | string;\n  type: 'tokenFailed' | 'userLoggedOut' | 'noSessionBound' | string;\n  error?: string;\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { GoogleApiConfig, NgGapiClientConfig } from '../config/google-api.config';\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n  new InjectionToken<NgGapiClientConfig>('ng-gapi.config');\n\n@Injectable()\nexport class GoogleApiLoaderService {\n  private readonly gapiUrl: string = 'https://apis.google.com/js/platform.js';\n  private readonly config: GoogleApiConfig;\n\n  constructor(@Inject(NG_GAPI_CONFIG) config: NgGapiClientConfig) {\n    this.config = new GoogleApiConfig(config);\n    this.loadGapi().subscribe();\n  }\n\n  public onLoad(): Observable<boolean> {\n    return this.loadGapi();\n  }\n\n  public getConfig(): GoogleApiConfig {\n    return this.config;\n  }\n\n  public isMocked(): boolean {\n    return this.config.getMocked();\n  }\n\n  private loadGapi(): Observable<boolean> {\n    return new Observable((observer: Observer<boolean>) => {\n      const node = document.createElement('script');\n      node.src = this.gapiUrl;\n      node.type = 'text/javascript';\n      document.getElementsByTagName('head')[0].appendChild(node);\n      node.onload = () => {\n        observer.next(true);\n        observer.complete();\n      };\n    });\n  }\n}\n","/// <reference types=\"gapi.auth2\" />\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport GoogleAuth = gapi.auth2.GoogleAuth;\nimport { GoogleApiLoaderService } from './google-api-loader.service';\n\n\n@Injectable()\nexport class GoogleAuth2LoaderService {\n  private GoogleAuth: GoogleAuth = undefined;\n\n  constructor(private googleApi: GoogleApiLoaderService) {\n    this.googleApi.onLoad().subscribe(() => {\n      this.loadGoogleAuth2().subscribe();\n    });\n  }\n\n  public getAuth(newInstance = false): Observable<GoogleAuth> {\n    if (!this.GoogleAuth || newInstance) {\n      return this.googleApi.onLoad()\n        .pipe(mergeMap(() => this.loadGoogleAuth2()));\n    }\n    return of(this.GoogleAuth);\n  }\n\n  private loadGoogleAuth2(): Observable<GoogleAuth> {\n    return new Observable((observer: Observer<GoogleAuth>) => {\n      gapi.load('auth2', () => {\n        gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n          this.GoogleAuth = auth;\n          observer.next(auth);\n          observer.complete();\n        }).catch((err: any) => observer.error(err));\n      });\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n\nimport { GoogleAuth2LoaderService } from './google-auth2-loader.service';\nimport { GoogleApiLoaderService } from './google-api-loader.service';\nimport { AuthData, SignInError } from '../models/auth';\n\n@Injectable()\nexport class GoogleAuthService {\n  private _authState: ReplaySubject<AuthData> = new ReplaySubject(1);\n  private _loginState: ReplaySubject<AuthData | SignInError> = new ReplaySubject(1);\n  private auth: gapi.auth2.GoogleAuth;\n\n  private readonly SIGN_IN_EXPIRE_KEY = 'loginExpirationDate';\n\n  get authState(): Observable<AuthData> {\n    return this._authState.asObservable();\n  }\n\n  get loginState(): Observable<AuthData | SignInError> {\n    return this._loginState.asObservable();\n  }\n\n  constructor(\n    private googleAuth2LoaderService: GoogleAuth2LoaderService,\n    private googleApiLoaderService: GoogleApiLoaderService,\n    private ngZone: NgZone\n  ) {\n    if (this.googleApiLoaderService.isMocked()) {\n      this.signIn();\n    } else {\n      this.googleApiLoaderService.onLoad().subscribe(() => {\n        this.googleAuth2LoaderService.getAuth().subscribe(\n          auth => this.authLoaded(auth),\n          () => this.removeState()\n        );\n        interval(20 * 60 * 1000).pipe(  // run every 20min\n          tap(() => this.refreshToken())\n        ).subscribe();\n      });\n    }\n  }\n\n  public signIn(): void {\n    if (this.googleApiLoaderService.isMocked()) {\n      this._loginState.next(JSON.parse(localStorage.getItem('user')));\n      this._authState.next(JSON.parse(localStorage.getItem('user')));\n    } else {\n      const now = new Date();\n      const expirationDate = this.setTime(now, null, now.getMinutes() + 5);\n      localStorage.setItem(this.SIGN_IN_EXPIRE_KEY, expirationDate.toISOString());\n      const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n      this.auth.signIn({\n        prompt: 'select_account',\n        ux_mode: isSafari ? 'popup' : 'redirect',\n      }).then(() => this.fetchLoginData());\n    }\n  }\n\n  public signOut(): void {\n    if (!this.googleApiLoaderService.isMocked()) {\n      this.auth.signOut();\n    }\n    this.removeState();\n  }\n\n  public fetchLoginData(): Promise<void> {\n    return this.auth.currentUser.get().reloadAuthResponse().then(r => {\n      this.ngZone.run(() => {\n        this._loginState.next(this.getProfile(r.id_token, r.expires_at));\n        this._authState.next(this.getProfile(r.id_token, r.expires_at));\n      });\n    });\n  }\n\n  public refreshToken(): Promise<void> {\n    return this.auth.currentUser.get().reloadAuthResponse().then(r => {\n      this.ngZone.run(() => this._authState.next(this.getProfile(r.id_token, r.expires_at)));\n    });\n  }\n\n  private authLoaded(auth: gapi.auth2.GoogleAuth): void {\n    this.auth = auth;\n    if (this.auth.currentUser.get().isSignedIn()) {\n      this.fetchLoginData();\n      localStorage.removeItem(this.SIGN_IN_EXPIRE_KEY);\n    } else {\n      const signInDateExpireDate = new Date(localStorage.getItem(this.SIGN_IN_EXPIRE_KEY));\n      if (signInDateExpireDate > new Date()) {\n        this._loginState.next({ type: 'cookiesNotEnabled' });\n        this._authState.next(null);\n      } else {\n        this.removeState();\n      }\n    }\n  }\n\n  private removeState(): void {\n    this._authState.next(null);\n    this._loginState.next(null);\n  }\n\n  private getProfile(token: string, expiresAt: number): AuthData {\n    const p = this.auth.currentUser.get().getBasicProfile();\n    return p ? {\n      id: p.getId(),\n      email: p.getEmail(),\n      firstName: p.getGivenName(),\n      lastName: p.getFamilyName(),\n      avatar: p.getImageUrl(),\n      idToken: token,\n      tokenExpiresAt: expiresAt,\n    } : null;\n  }\n\n  private setTime(date: string | Date, hours?: number, minutes?: number, seconds?: number, milliseconds?: number): Date {\n    const newDate = new Date(date);\n    if (typeof hours === 'number') {\n      newDate.setHours(hours);\n    }\n    if (typeof minutes === 'number') {\n      newDate.setMinutes(minutes);\n    }\n    if (typeof seconds === 'number') {\n      newDate.setSeconds(seconds);\n    }\n    if (typeof milliseconds === 'number') {\n      newDate.setMilliseconds(milliseconds);\n    }\n    return newDate;\n  }\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GoogleApiLoaderService } from './services/google-api-loader.service';\nimport { GoogleAuth2LoaderService } from './services/google-auth2-loader.service';\nimport { GoogleAuthService } from './services/google-auth.service';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class GoogleOauthModule {\n  static forRoot(gapiConfigProvider: Provider): ModuleWithProviders<GoogleOauthModule> {\n    return {\n      ngModule: GoogleOauthModule,\n      providers: [\n        gapiConfigProvider,\n        GoogleApiLoaderService,\n        GoogleAuth2LoaderService,\n        GoogleAuthService\n      ]\n    };\n  }\n}\n"]}